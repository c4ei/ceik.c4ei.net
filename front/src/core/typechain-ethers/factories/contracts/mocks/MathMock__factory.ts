/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MathMock,
  MathMockInterface,
} from "../../../contracts/mocks/MathMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "sqrt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101d6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063677342ce1461003b5780637ae2b5c714610060575b600080fd5b61004e61004936600461011d565b610073565b60405190815260200160405180910390f35b61004e61006e366004610136565b610084565b600061007e82610097565b92915050565b60006100908383610107565b9392505050565b600060038211156100f857508060006100b1600283610158565b6100bc90600161017a565b90505b818110156100f2579050806002816100d78186610158565b6100e1919061017a565b6100eb9190610158565b90506100bf565b50919050565b8115610102575060015b919050565b60008183106101165781610090565b5090919050565b60006020828403121561012f57600080fd5b5035919050565b6000806040838503121561014957600080fd5b50508035926020909101359150565b60008261017557634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561019b57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212201d83a10501466e00160040b16ef798796740a6cb55381e93cc4dfce4aa2c446164736f6c634300080c0033";

type MathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathMock__factory extends ContractFactory {
  constructor(...args: MathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MathMock> {
    return super.deploy(overrides || {}) as Promise<MathMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MathMock {
    return super.attach(address) as MathMock;
  }
  override connect(signer: Signer): MathMock__factory {
    return super.connect(signer) as MathMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathMockInterface {
    return new utils.Interface(_abi) as MathMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MathMock {
    return new Contract(address, _abi, signerOrProvider) as MathMock;
  }
}
