/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: "KAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KAccessControl__factory>;
    getContractFactory(
      name: "IKIP7Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKIP7Permit__factory>;
    getContractFactory(
      name: "KIP7Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KIP7Permit__factory>;
    getContractFactory(
      name: "IKIP7Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKIP7Metadata__factory>;
    getContractFactory(
      name: "KIP7Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KIP7Votes__factory>;
    getContractFactory(
      name: "IKIP7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKIP7__factory>;
    getContractFactory(
      name: "IKIP7Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKIP7Receiver__factory>;
    getContractFactory(
      name: "KIP7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KIP7__factory>;
    getContractFactory(
      name: "IKIP13",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKIP13__factory>;
    getContractFactory(
      name: "KIP13",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KIP13__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Farming",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Farming__factory>;
    getContractFactory(
      name: "StakingFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingFactory__factory>;
    getContractFactory(
      name: "StakingInitializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingInitializable__factory>;
    getContractFactory(
      name: "IDexCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDexCallee__factory>;
    getContractFactory(
      name: "IDexFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDexFactory__factory>;
    getContractFactory(
      name: "IDexKIP7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDexKIP7__factory>;
    getContractFactory(
      name: "IDexPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDexPair__factory>;
    getContractFactory(
      name: "IDexRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDexRouter__factory>;
    getContractFactory(
      name: "IPlatformToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlatformToken__factory>;
    getContractFactory(
      name: "IWKLAY",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWKLAY__factory>;
    getContractFactory(
      name: "DeflKIP7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeflKIP7__factory>;
    getContractFactory(
      name: "DexKIP7Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexKIP7Test__factory>;
    getContractFactory(
      name: "KIP7Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KIP7Holder__factory>;
    getContractFactory(
      name: "KIP7Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KIP7Mock__factory>;
    getContractFactory(
      name: "MathMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MathMock__factory>;
    getContractFactory(
      name: "MultiSigWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSigWallet__factory>;
    getContractFactory(
      name: "DexFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexFactory__factory>;
    getContractFactory(
      name: "DexKIP7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexKIP7__factory>;
    getContractFactory(
      name: "DexPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexPair__factory>;
    getContractFactory(
      name: "DexRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexRouter__factory>;
    getContractFactory(
      name: "PlatformToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlatformToken__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotes>;
    getContractAt(
      name: "KAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KAccessControl>;
    getContractAt(
      name: "IKIP7Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKIP7Permit>;
    getContractAt(
      name: "KIP7Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KIP7Permit>;
    getContractAt(
      name: "IKIP7Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKIP7Metadata>;
    getContractAt(
      name: "KIP7Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KIP7Votes>;
    getContractAt(
      name: "IKIP7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKIP7>;
    getContractAt(
      name: "IKIP7Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKIP7Receiver>;
    getContractAt(
      name: "KIP7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KIP7>;
    getContractAt(
      name: "IKIP13",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKIP13>;
    getContractAt(
      name: "KIP13",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KIP13>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Farming",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Farming>;
    getContractAt(
      name: "StakingFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingFactory>;
    getContractAt(
      name: "StakingInitializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingInitializable>;
    getContractAt(
      name: "IDexCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDexCallee>;
    getContractAt(
      name: "IDexFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDexFactory>;
    getContractAt(
      name: "IDexKIP7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDexKIP7>;
    getContractAt(
      name: "IDexPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDexPair>;
    getContractAt(
      name: "IDexRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDexRouter>;
    getContractAt(
      name: "IPlatformToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlatformToken>;
    getContractAt(
      name: "IWKLAY",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWKLAY>;
    getContractAt(
      name: "DeflKIP7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeflKIP7>;
    getContractAt(
      name: "DexKIP7Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DexKIP7Test>;
    getContractAt(
      name: "KIP7Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KIP7Holder>;
    getContractAt(
      name: "KIP7Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KIP7Mock>;
    getContractAt(
      name: "MathMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MathMock>;
    getContractAt(
      name: "MultiSigWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSigWallet>;
    getContractAt(
      name: "DexFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DexFactory>;
    getContractAt(
      name: "DexKIP7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DexKIP7>;
    getContractAt(
      name: "DexPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DexPair>;
    getContractAt(
      name: "DexRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DexRouter>;
    getContractAt(
      name: "PlatformToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlatformToken>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
